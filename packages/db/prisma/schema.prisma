// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////
// ENUMS
///////////////////////////

enum UserRole {
  ADMIN
  EXECUTOR
  RECIPIENT
}

enum CapabilityKind {
  TRIGGER
  ACTION
}

enum InvocationStatus {
  PENDING
  SUCCESS
  FAILED
  SKIPPED_DISABLED
}

enum VerificationType {
  MAGIC_LINK
  OTP
  PASSPHRASE
}

enum PermissionType {
  DOWNLOAD_ACCESS
  SEND_MESSAGE
  ADMIN_PANEL
  OVERRIDE_RELEASE
}

///////////////////////////
// CORE MODELS
///////////////////////////

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  name                String?
  roles               UserRole[]
  executorAssignments ExecutorAssignment[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ActionInvocation    ActionInvocation[]
  Session             Session[]
  MagicLink           MagicLink[]
  ApiToken            ApiToken[]
  DeviceAuth          DeviceAuth[]
}

model Recipient {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String?
  bundleAssignments BundleAssignment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model File {
  id          String   @id @default(uuid())
  // Logical name/path in the admin UI (can be moved/renamed)
  key         String   @unique
  // Where the blob actually lives in storage (content-addressed path or provider key)
  storageKey  String   @unique
  contentHash String // e.g., sha256 hex (useful for ETag/dedup)
  size        BigInt
  contentType String
  metadata    Json?
  version     Int      @default(1) // bump on overwrite-in-place if you allow it
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bundleObjects  BundleObject[]
  downloadEvents DownloadEvent[] // back-reference if you log per-file downloads

  @@index([contentHash, size])
  @@index([updatedAt])
}

model Bundle {
  id                 String               @id @default(uuid())
  name               String
  storagePath        String
  checksum           String
  description        String?
  bundleObjects      BundleObject[]
  assignments        BundleAssignment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ExecutorAssignment ExecutorAssignment[]
}

model BundleObject {
  id       String @id @default(uuid())
  bundle   Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  bundleId String
  file     File   @relation(fields: [fileId], references: [id], onDelete: Restrict)
  fileId   String

  // Per-bundle presentation
  path      String? // optional "display path" inside the bundle (e.g., "docs/guide.pdf")
  sortOrder Int     @default(0)
  required  Boolean @default(false)
  notes     String?

  addedAt DateTime @default(now())

  @@unique([bundleId, fileId]) // a file appears at most once per bundle (adjust if you want duplicates)
  @@index([bundleId, sortOrder])
}

model BundleAssignment {
  id               String            @id @default(uuid())
  bundle           Bundle            @relation(fields: [bundleId], references: [id])
  bundleId         String
  recipient        Recipient         @relation(fields: [recipientId], references: [id])
  recipientId      String
  maxDownloads     Int?
  cooldownSeconds  Int?
  verificationType VerificationType?
  verificationMet  Boolean           @default(false)
  lastDownloadAt   DateTime?
  downloadEvents   DownloadEvent[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model DownloadEvent {
  id                 String           @id @default(uuid())
  bundleAssignment   BundleAssignment @relation(fields: [bundleAssignmentId], references: [id])
  bundleAssignmentId String
  triggerEvent       TriggerEvent?    @relation(fields: [triggerEventId], references: [id])
  triggerEventId     String?
  downloadedAt       DateTime         @default(now())
  userAgent          String
  ip                 String
  File               File?            @relation(fields: [fileId], references: [id])
  fileId             String?
}

///////////////////////////
// PLUGIN REGISTRY
///////////////////////////

model Plugin {
  id            String             @id @default(uuid())
  name          String
  version       String?
  description   String?
  author        String?
  homepageUrl   String?
  repositoryUrl String?
  installedAt   DateTime           @default(now())
  capabilities  PluginCapability[]
}

model PluginCapability {
  id                String              @id @default(uuid())
  plugin            Plugin              @relation(fields: [pluginId], references: [id])
  pluginId          String
  kind              CapabilityKind
  key               String // e.g. "cron_schedule", "email_notify"
  displayName       String
  jsonSchema        Json?
  isEnabled         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  TriggerDefinition TriggerDefinition[]
  ActionDefinition  ActionDefinition[]

  @@unique([pluginId, key])
}

///////////////////////////
// TRIGGERS & ACTIONS
///////////////////////////

model TriggerDefinition {
  id                  String               @id @default(uuid())
  name                String
  capability          PluginCapability     @relation(fields: [capabilityId], references: [id])
  capabilityId        String
  config              Json
  executorAssignments ExecutorAssignment[]
  ExecutorPermission  ExecutorPermission[]
  pipelines           PipelineTrigger[]
  events              TriggerEvent[]
  isEnabled           Boolean  @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model TriggerEvent {
  id                  String             @id @default(uuid())
  triggerDefinition   TriggerDefinition  @relation(fields: [triggerDefinitionId], references: [id])
  triggerDefinitionId String
  firedAt             DateTime           @default(now())
  context             Json
  actionInvocations   ActionInvocation[]
  DownloadEvent       DownloadEvent[]
}

model ActionDefinition {
  id                String             @id @default(uuid())
  name              String
  capability        PluginCapability   @relation(fields: [capabilityId], references: [id])
  capabilityId      String
  config            Json
  isEnabled         Boolean  @default(true)
  pipelineSteps     PipelineStep[]
  actionInvocations ActionInvocation[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ActionInvocation {
  id                 String           @id @default(uuid())
  actionDefinition   ActionDefinition @relation(fields: [actionDefinitionId], references: [id])
  actionDefinitionId String
  triggerEvent       TriggerEvent?    @relation(fields: [triggerEventId], references: [id])
  triggerEventId     String?
  manualInvoker      User?            @relation(fields: [manualInvokerId], references: [id])
  manualInvokerId    String?
  status             InvocationStatus
  startedAt          DateTime         @default(now())
  completedAt        DateTime?
  result             Json?
}

///////////////////////////
// Piplines & Steps
///////////////////////////

model Pipeline {
  id          String   @id @default(uuid())
  name        String
  description String?
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  steps       PipelineStep[]
  triggers    PipelineTrigger[]
}

model PipelineStep {
  id          String   @id @default(uuid())
  pipelineId  String
  actionId    String
  sortOrder   Int      @default(0)
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pipeline    Pipeline @relation(fields: [pipelineId], references: [id])
  action      ActionDefinition @relation(fields: [actionId], references: [id])

  @@unique([pipelineId, sortOrder], map: "pipelinestep_sort_unique")
}

model PipelineTrigger {
  pipelineId  String
  triggerId   String
  sortOrder   Int       @default(0)
  isEnabled   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  pipeline    Pipeline        @relation(fields: [pipelineId], references: [id])
  trigger     TriggerDefinition @relation(fields: [triggerId], references: [id])

  @@id([pipelineId, triggerId])
  @@unique([triggerId, sortOrder], map: "pipelinetrigger_sort_unique")
}

///////////////////////////
// EXECUTOR PERMISSIONS
///////////////////////////

model ExecutorAssignment {
  id                  String               @id @default(uuid())
  executor            User                 @relation(fields: [executorId], references: [id])
  executorId          String
  bundle              Bundle?              @relation(fields: [bundleId], references: [id])
  bundleId            String?
  triggerDefinition   TriggerDefinition?   @relation(fields: [triggerDefinitionId], references: [id])
  triggerDefinitionId String?
  permissions         ExecutorPermission[]
}

model ExecutorPermission {
  id                      String             @id @default(uuid())
  assignment              ExecutorAssignment @relation(fields: [assignmentId], references: [id])
  assignmentId            String
  type                    PermissionType
  isActive                Boolean            @default(true)
  activatedAfterTrigger   TriggerDefinition? @relation(fields: [activatedAfterTriggerId], references: [id])
  activatedAfterTriggerId String?
}

///////////////////////////
// AUTH MODELS
///////////////////////////

model Session {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jti       String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?
  ip        String?
  userAgent String?

  @@index([userId, expiresAt])
}

model MagicLink {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  consumedAt DateTime?
}

model RecipientSession {
  id          String    @id @default(uuid())
  recipientId String
  bundleId    String
  jti         String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  ip          String?
  userAgent   String?

  @@index([recipientId, bundleId])
}

model RecipientOtp {
  id          String   @id @default(uuid())
  recipientId String
  bundleId    String
  codeHash    String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  attempts    Int      @default(0)

  @@index([recipientId, bundleId])
}

///////////////////////////
// CLI AUTH MODELS
///////////////////////////

model ApiToken {
  id         String       @id @default(uuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  scopes     String[]
  tokenHash  String       @unique
  createdAt  DateTime     @default(now())
  lastUsedAt DateTime?
  expiresAt  DateTime?
  revokedAt  DateTime?
  DeviceAuth DeviceAuth[]

  @@index([userId])
}

model DeviceAuth {
  id             String    @id @default(uuid())
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email          String
  deviceName     String?
  deviceCodeHash String    @unique
  userCodeHash   String    @unique
  intervalSec    Int       @default(5)
  createdAt      DateTime  @default(now())
  expiresAt      DateTime
  approvedAt     DateTime?
  tokenId        String?
  token          ApiToken? @relation(fields: [tokenId], references: [id], onDelete: SetNull)
}
