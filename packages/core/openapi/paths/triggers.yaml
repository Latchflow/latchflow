triggers_collection:
  get:
    summary: List trigger definitions
    operationId: listTriggers
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - $ref: ../components/parameters/Limit.yaml
      - $ref: ../components/parameters/Cursor.yaml
      - in: query
        name: q
        schema: { type: string }
        description: Case-insensitive name search
      - in: query
        name: pluginId
        schema: { type: string, format: uuid }
      - in: query
        name: capabilityKey
        schema: { type: string }
      - in: query
        name: enabled
        schema: { type: boolean }
      - in: query
        name: updatedSince
        schema: { type: string, format: date-time }
    responses:
      '200':
        description: Triggers
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/TriggerDefinition.yaml }
                nextCursor: { type: string }
              required: [items]
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  post:
    summary: Create trigger definition
    operationId: createTrigger
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
              capabilityId: { type: string, format: uuid }
              config: { type: object }
            required: [name, capabilityId, config]
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema: { $ref: ../components/schemas/TriggerDefinition.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }

triggers_item:
  get:
    summary: Get trigger definition
    operationId: getTrigger
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '200':
        description: Trigger
        content:
          application/json:
            schema: { $ref: ../components/schemas/TriggerDefinition.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  patch:
    summary: Update trigger definition
    operationId: updateTrigger
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
              isEnabled: { type: boolean }
              config: { type: object }
    responses:
      '204': { description: Updated }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
  delete:
    summary: Delete trigger definition
    operationId: deleteTrigger
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '204': { description: Deleted }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }

triggers_status:
  get:
    summary: Trigger runtime status
    operationId: getTriggerStatus
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '200':
        description: Trigger status and runtime metrics
        content:
          application/json:
            schema: { $ref: ../components/schemas/TriggerStatusResponse.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

# TriggerDefinition versions (history)
trigger_versions_collection:
  get:
    summary: List trigger definition versions
    operationId: listTriggerVersions
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - $ref: ../components/parameters/Limit.yaml
      - $ref: ../components/parameters/Cursor.yaml
    responses:
      '200':
        description: Versions
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/ChangeLogVersion.yaml }
                nextCursor: { type: string }
              required: [items]
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  post:
    summary: Create new trigger version
    operationId: createTriggerVersion
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              config: { type: object }
              changeNote: { type: string }
            required: [config]
    responses:
      '201':
        description: Version created
        content:
          application/json:
            schema: { $ref: ../components/schemas/ChangeLogVersion.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

trigger_versions_item:
  get:
    summary: Get trigger definition version
    operationId: getTriggerVersion
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - in: path
        name: version
        required: true
        schema: { type: integer, minimum: 1 }
    responses:
      '200':
        description: Materialized trigger definition at version
        content:
          application/json:
            schema: { $ref: ../components/schemas/ChangeLogMaterialized.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

trigger_versions_activate:
  post:
    summary: Activate trigger definition version
    operationId: activateTriggerVersion
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - in: path
        name: version
        required: true
        schema: { type: integer, minimum: 1 }
    responses:
      '204': { description: Activated }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }

test_fire:
  post:
    summary: Enqueue actions for a trigger definition
    operationId: testFireTrigger
    tags: [Triggers]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              context: { type: object, additionalProperties: true }
    responses:
      '202': { description: Enqueued }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '503': { description: Trigger runner unavailable }
