users_collection:
  get:
    summary: List users
    operationId: listUsers
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - $ref: ../components/parameters/Limit.yaml
      - $ref: ../components/parameters/Cursor.yaml
      - in: query
        name: q
        schema: { type: string }
        description: Case-insensitive search over email, name, displayName.
      - in: query
        name: role
        schema: { type: string, enum: [ADMIN, EXECUTOR] }
      - in: query
        name: isActive
        schema: { type: boolean }
      - in: query
        name: updatedSince
        schema: { type: string, format: date-time }
    responses:
      '200':
        description: Users
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/User.yaml }
                nextCursor: { type: string }
              required: [items]
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  post:
    summary: Create user
    operationId: createUser
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email: { type: string, format: email }
              name:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              displayName:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              role:
                type: string
                enum: [ADMIN, EXECUTOR]
            required: [email]
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema: { $ref: ../components/schemas/User.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }

users_invite:
  post:
    summary: Invite user (inactive until login)
    operationId: inviteUser
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email: { type: string, format: email }
              name:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              displayName:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              role:
                type: string
                enum: [ADMIN, EXECUTOR]
            required: [email]
    responses:
      '202': { description: Invitation created }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }

users_item:
  get:
    summary: Get user
    operationId: getUser
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '200':
        description: User
        content:
          application/json:
            schema: { $ref: ../components/schemas/User.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
  patch:
    summary: Update user
    operationId: updateUser
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              displayName:
                oneOf:
                  - { type: string }
                  - { type: 'null' }
              role:
                type: string
                enum: [ADMIN, EXECUTOR]
              isActive: { type: boolean }
    responses:
      '204': { description: Updated }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
  delete:
    summary: Delete user (not recommended; prefer deactivate)
    operationId: deleteUser
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    deprecated: true
    responses:
      '204': { description: Deprecated (deletion disabled; endpoint currently returns 409 DELETE_DISABLED) }
      '409': { $ref: ../components/responses/Conflict.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }

users_sessions:
  get:
    summary: List user sessions
    operationId: listUserSessions
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '200':
        description: Sessions
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/UserSession.yaml }
              required: [items]
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

users_revoke:
  post:
    summary: Revoke all sessions for a user
    operationId: revokeUserSessions
    tags: [Users]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '204': { description: Sessions revoked }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
