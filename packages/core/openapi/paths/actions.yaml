actions_collection:
  get:
    summary: List action definitions
    operationId: listActions
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - $ref: ../components/parameters/Limit.yaml
      - $ref: ../components/parameters/Cursor.yaml
      - in: query
        name: q
        required: false
        description: Filter by name (case-insensitive, substring)
        schema: { type: string }
      - in: query
        name: pluginId
        required: false
        schema: { type: string, format: uuid }
      - in: query
        name: kind
        required: false
        description: Filter by capability key (case-insensitive, substring)
        schema: { type: string }
      - in: query
        name: enabled
        required: false
        schema: { type: boolean }
      - in: query
        name: updatedSince
        required: false
        schema: { type: string, format: date-time }
    responses:
      '200':
        description: Actions
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/ActionDefinition.yaml }
                nextCursor: { type: string }
              required: [items]
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  post:
    summary: Create action definition
    operationId: createAction
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
              capabilityId: { type: string, format: uuid }
              config: { type: object }
            required: [name, capabilityId, config]
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema: { $ref: ../components/schemas/ActionDefinition.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }

actions_item:
  get:
    summary: Get action definition
    operationId: getAction
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '200':
        description: Action definition
        content:
          application/json:
            schema: { $ref: ../components/schemas/ActionDefinition.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  patch:
    summary: Update action definition metadata
    operationId: updateAction
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
              isEnabled: { type: boolean }
    responses:
      '204': { description: Updated }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
  delete:
    summary: Delete action definition
    operationId: deleteAction
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    responses:
      '204': { description: Deleted }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }

# ActionDefinition versions (history)
action_versions_collection:
  get:
    summary: List action definition versions
    operationId: listActionVersions
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - $ref: ../components/parameters/Limit.yaml
      - $ref: ../components/parameters/Cursor.yaml
    responses:
      '200':
        description: Versions
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: { $ref: ../components/schemas/ChangeLogVersion.yaml }
                nextCursor: { type: string }
              required: [items]
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
  post:
    summary: Create new action version
    operationId: createActionVersion
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              config: { type: object }
              changeNote: { type: string }
            required: [config]
    responses:
      '201':
        description: Version created
        content:
          application/json:
            schema: { $ref: ../components/schemas/ChangeLogVersion.yaml }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

action_versions_item:
  get:
    summary: Get action definition version
    operationId: getActionVersion
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - in: path
        name: version
        required: true
        schema: { type: integer, minimum: 1 }
    responses:
      '200':
        description: Materialized action definition at version
        content:
          application/json:
            schema: { $ref: ../components/schemas/ChangeLogMaterialized.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }

action_versions_activate:
  post:
    summary: Activate action definition version
    operationId: activateActionVersion
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
      - in: path
        name: version
        required: true
        schema: { type: integer, minimum: 1 }
    responses:
      '204': { description: Activated }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '409': { $ref: ../components/responses/Conflict.yaml }

action_test_run:
  post:
    summary: Enqueue test run for an action definition
    operationId: testRunAction
    tags: [Actions]
    security:
      - bearer: []
      - cookieAdmin: []
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              context:
                type: object
                additionalProperties: true
    responses:
      '202': { description: Enqueued }
      '400': { $ref: ../components/responses/ValidationError.yaml }
      '401': { $ref: ../components/responses/Unauthorized.yaml }
      '403': { $ref: ../components/responses/Forbidden.yaml }
      '404': { $ref: ../components/responses/NotFound.yaml }
      '503': { description: Queue unavailable }
