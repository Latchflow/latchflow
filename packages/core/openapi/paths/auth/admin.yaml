admin_start:
  post:
    summary: Start admin login via magic link
    description: |
      Initiates email-based admin authentication by issuing a one-time magic link token.

      Behavior:
      - Bootstrap (zero users exist): the server upserts a user record with the role of EXECUTOR and no permissions for the
        provided email to allow issuing a magic link. The ADMIN role is granted during callback.
      - Post-bootstrap (one or more users exist): the email MUST already belong to an existing user
        (or be previously invited). Unknown emails result in a Not Found error.
    operationId: startAdminLogin
    tags: [Auth (Admin)]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
            required: [email]
          examples:
            example:
              value:
                email: admin@example.com
    responses:
      '200':
        description: Dev mode only â€” returns a direct login URL instead of sending email
        content:
          application/json:
            schema:
              type: object
              properties:
                login_url:
                  type: string
                  description: Magic-link callback URL usable to complete login
              required: [login_url]
      '204':
        description: Magic link issued (no content)
      '400':
        $ref: ../../components/responses/ValidationError.yaml
      '403':
        $ref: ../../components/responses/Forbidden.yaml

admin_callback:
  get:
    summary: Finalize admin login using magic link token
    description: |
      Consumes a magic link token and establishes an admin session via cookie.
      Bootstrap: if there are currently no admins, the verified user is granted ADMIN (and EXECUTOR)
      during the first successful callback.
    operationId: finalizeAdminLogin
    tags: [Auth (Admin)]
    parameters:
      - in: query
        name: token
        required: true
        schema:
          type: string
    responses:
      '204':
        description: Session established via cookie
      '400':
        $ref: ../../components/responses/ValidationError.yaml
      '401':
        $ref: ../../components/responses/Unauthorized.yaml
      '403':
        $ref: ../../components/responses/Forbidden.yaml

admin_logout:
  post:
    summary: Logout admin session
    operationId: logoutAdmin
    tags: [Auth (Admin)]
    responses:
      '204':
        description: Logged out
      '403':
        $ref: ../../components/responses/Forbidden.yaml

auth_me:
  get:
    summary: Get current admin user
    operationId: getCurrentAdmin
    tags: [Auth (Admin)]
    security:
      - cookieAdmin: []
    responses:
      '200':
        description: Current user info
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: ../../components/schemas/User.yaml
                session:
                  type: object
              required: [user]
      '401': { $ref: ../../components/responses/Unauthorized.yaml }
      '403': { $ref: ../../components/responses/Forbidden.yaml }

whoami:
  get:
    summary: Identify current principal (admin or cli)
    operationId: whoAmI
    tags: [Auth (Admin)]
    security:
      - cookieAdmin: []
      - bearer: []
    responses:
      '200':
        description: Identity
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  enum: [admin, cli]
                user:
                  $ref: ../../components/schemas/User.yaml
                scopes:
                  type: array
                  items:
                    type: string
      '401': { $ref: ../../components/responses/Unauthorized.yaml }
      '403': { $ref: ../../components/responses/Forbidden.yaml }

auth_sessions:
  get:
    summary: List active admin sessions for current user
    operationId: listAdminSessions
    tags: [Auth (Admin)]
    security:
      - cookieAdmin: []
    responses:
      '200':
        description: Sessions
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      createdAt: { type: string, format: date-time }
                      expiresAt: { type: string, format: date-time }
                      lastSeenAt: { type: string, format: date-time }
                      ip: { type: string }
                      userAgent: { type: string }
                    required: [id, createdAt, expiresAt]
              required: [items]
      '401': { $ref: ../../components/responses/Unauthorized.yaml }
      '403': { $ref: ../../components/responses/Forbidden.yaml }

auth_sessions_revoke:
  post:
    summary: Revoke a specific admin session
    operationId: revokeAdminSession
    tags: [Auth (Admin)]
    security:
      - cookieAdmin: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              sessionId: { type: string, format: uuid }
            required: [sessionId]
    responses:
      '204': { description: Revoked }
      '401': { $ref: ../../components/responses/Unauthorized.yaml }
      '403': { $ref: ../../components/responses/Forbidden.yaml }
      '400': { $ref: ../../components/responses/ValidationError.yaml }
