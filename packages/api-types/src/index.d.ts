/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/openapi.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Bundled OpenAPI document */
    get: operations["getOpenApi"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health/live": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Liveness probe */
    get: operations["getLiveness"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health/ready": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Readiness probe */
    get: operations["getReadiness"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check */
    get: operations["getHealth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/admin/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Start admin login via magic link
     * @description Initiates email-based admin authentication by issuing a one-time magic link token.
     *
     *     Behavior:
     *     - Bootstrap (zero users exist): the server upserts a user record with the role of EXECUTOR and no permissions for the
     *       provided email to allow issuing a magic link. The ADMIN role is granted during callback.
     *     - Post-bootstrap (one or more users exist): the email MUST already belong to an existing user
     *       (or be previously invited). Unknown emails result in a Not Found error.
     *
     */
    post: operations["startAdminLogin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/admin/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Finalize admin login using magic link token
     * @description Consumes a magic link token and establishes an admin session via cookie.
     *     Bootstrap: if there are currently no admins, the verified user is granted ADMIN (and EXECUTOR)
     *     during the first successful callback.
     *
     */
    get: operations["finalizeAdminLogin"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/admin/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout admin session */
    post: operations["logoutAdmin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current admin user */
    get: operations["getCurrentAdmin"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/whoami": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Identify current principal (admin or cli) */
    get: operations["whoAmI"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/sessions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List active admin sessions for current user */
    get: operations["listAdminSessions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/sessions/revoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Revoke a specific admin session */
    post: operations["revokeAdminSession"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/recipient/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start recipient OTP flow */
    post: operations["startRecipientOtp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/recipient/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify recipient OTP and establish session */
    post: operations["verifyRecipientOtp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/recipient/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout recipient session */
    post: operations["logoutRecipient"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/device/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start CLI device authorization */
    post: operations["startCliDeviceAuth"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/device/approve": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Approve a CLI device using user code (admin/executor only) */
    post: operations["approveCliDevice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/device/poll": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Poll for device authorization result */
    post: operations["pollCliDevice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List API tokens for current admin/executor */
    get: operations["listCliTokens"];
    put?: never;
    /** Create a new API token */
    post: operations["createCliToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/tokens/revoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Revoke an API token */
    post: operations["revokeCliToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/cli/tokens/rotate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Rotate an API token */
    post: operations["rotateCliToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List files */
    get: operations["listFiles"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload file */
    post: operations["uploadFile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/upload-url": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create pre-signed upload URL */
    post: operations["createUploadUrl"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/commit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Finalize a presigned upload */
    post: operations["commitUpload"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get file by id */
    get: operations["getFile"];
    put?: never;
    post?: never;
    /** Delete file */
    delete: operations["deleteFile"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{id}/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Move/rename file key */
    post: operations["moveFile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{id}/metadata": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update file metadata */
    patch: operations["updateFileMetadata"];
    trace?: never;
  };
  "/files/batch/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Batch delete files */
    post: operations["deleteFilesBatch"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/batch/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Batch move files */
    post: operations["moveFilesBatch"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{id}/download": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download file */
    get: operations["downloadFile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List bundles */
    get: operations["listBundles"];
    put?: never;
    /** Create bundle */
    post: operations["createBundle"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles/{bundleId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get bundle by id */
    get: operations["getBundle"];
    put?: never;
    post?: never;
    /** Delete bundle */
    delete: operations["deleteBundle"];
    options?: never;
    head?: never;
    /** Update bundle */
    patch: operations["updateBundle"];
    trace?: never;
  };
  "/bundles/{bundleId}/objects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List bundle objects */
    get: operations["listBundleObjects"];
    put?: never;
    /** Attach files to bundle */
    post: operations["attachBundleObjects"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles/{bundleId}/objects/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Detach bundle object */
    delete: operations["deleteBundleObject"];
    options?: never;
    head?: never;
    /** Update bundle object */
    patch: operations["updateBundleObject"];
    trace?: never;
  };
  "/bundles/{bundleId}/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List bundle versions */
    get: operations["listBundleVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles/{bundleId}/versions/{version}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get bundle version */
    get: operations["getBundleVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recipients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List recipients */
    get: operations["listRecipients"];
    put?: never;
    /** Create recipient */
    post: operations["createRecipient"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recipients/{recipientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get recipient by id */
    get: operations["getRecipient"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recipients/{recipientId}/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List recipient versions */
    get: operations["listRecipientVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recipients/{recipientId}/versions/{version}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get recipient version */
    get: operations["getRecipientVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles/{bundleId}/recipients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List recipients assigned to a bundle */
    get: operations["listBundleRecipients"];
    put?: never;
    /** Attach recipient to bundle */
    post: operations["attachRecipientToBundle"];
    /** Detach recipient from bundle */
    delete: operations["detachRecipientFromBundle"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bundles/{bundleId}/recipients/batch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Attach multiple recipients to bundle */
    post: operations["attachRecipientsToBundleBatch"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/portal/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current recipient info */
    get: operations["getPortalMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/portal/bundles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List bundles available to the recipient */
    get: operations["listPortalBundles"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/portal/bundles/{bundleId}/objects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List files in a bundle (recipient view) */
    get: operations["listPortalBundleObjects"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/portal/bundles/{bundleId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download bundle (stream or redirect) */
    get: operations["downloadPortalBundle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/portal/auth/otp/resend": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Resend recipient OTP */
    post: operations["resendPortalOtp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plugins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List registered plugins */
    get: operations["listPlugins"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plugins/{pluginId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Uninstall plugin */
    delete: operations["uninstallPlugin"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plugins/install": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Install plugin */
    post: operations["installPlugin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/capabilities": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List registered trigger/action capabilities */
    get: operations["listCapabilities"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/triggers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List trigger definitions */
    get: operations["listTriggers"];
    put?: never;
    /** Create trigger definition */
    post: operations["createTrigger"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/triggers/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update trigger definition */
    patch: operations["updateTrigger"];
    trace?: never;
  };
  "/triggers/{id}/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List trigger definition versions */
    get: operations["listTriggerVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/triggers/{id}/versions/{version}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get trigger definition version */
    get: operations["getTriggerVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/actions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List action definitions */
    get: operations["listActions"];
    put?: never;
    /** Create action definition */
    post: operations["createAction"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/actions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update action definition */
    patch: operations["updateAction"];
    trace?: never;
  };
  "/actions/{id}/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List action definition versions */
    get: operations["listActionVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/actions/{id}/versions/{version}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get action definition version */
    get: operations["getActionVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pipelines": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List pipelines */
    get: operations["listPipelines"];
    put?: never;
    /** Create pipeline */
    post: operations["createPipeline"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pipelines/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete pipeline */
    delete: operations["deletePipeline"];
    options?: never;
    head?: never;
    /** Update pipeline */
    patch: operations["updatePipeline"];
    trace?: never;
  };
  "/pipelines/{pipelineId}/steps": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List pipeline steps */
    get: operations["listPipelineSteps"];
    put?: never;
    /** Add pipeline step */
    post: operations["addPipelineStep"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pipelines/{pipelineId}/steps/{stepId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete pipeline step */
    delete: operations["deletePipelineStep"];
    options?: never;
    head?: never;
    /** Update pipeline step */
    patch: operations["updatePipelineStep"];
    trace?: never;
  };
  "/pipelines/{pipelineId}/triggers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List pipeline triggers */
    get: operations["listPipelineTriggers"];
    put?: never;
    /** Attach trigger to pipeline */
    post: operations["addPipelineTrigger"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pipelines/{pipelineId}/triggers/{triggerId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Detach trigger from pipeline */
    delete: operations["deletePipelineTrigger"];
    options?: never;
    head?: never;
    /** Update pipeline trigger */
    patch: operations["updatePipelineTrigger"];
    trace?: never;
  };
  "/pipelines/{id}/versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List pipeline versions */
    get: operations["listPipelineVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/pipelines/{id}/versions/{version}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get pipeline version */
    get: operations["getPipelineVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List users/executors */
    get: operations["listUsers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/invite": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Invite a user (issue magic link)
     * @description Upserts a user by email.
     *     Issues a one-time magic link for login. Implementations may return a `login_url`
     *     for copy-paste delivery or send an email if SMTP is configured.
     *
     */
    post: operations["inviteUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{id}/revoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Revoke a user's access tokens and/or sessions
     * @description Soft-revoke user access by invalidating active sessions and/or CLI API tokens.
     *     Avoids hard deletion since users are referenced widely by audit trails.
     *
     */
    post: operations["revokeUserAccess"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    /** @description Standard error envelope for all error responses */
    Error: {
      /**
       * @description Fixed string indicating an error response
       * @enum {string}
       */
      status: "error";
      /** @description Stable machine-readable error code */
      code: string;
      /** @description Human-friendly error description */
      message?: string;
      /** @description Optional extra data about the error */
      details?: {
        [key: string]: unknown;
      };
      /** @description Correlation identifier for logs/trace */
      requestId?: string;
    };
    Page: {
      items: Record<string, never>[];
      nextCursor?: string;
    };
    ObjectMeta: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt: string;
    };
    File: {
      /** Format: uuid */
      id: string;
      key: string;
      size: number;
      contentType: string;
      metadata?: {
        [key: string]: string;
      };
      etag?: string;
      contentHash?: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Bundle: {
      /** Format: uuid */
      id: string;
      name: string;
      storagePath: string;
      checksum: string;
      description?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    BundleObject: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      bundleId: string;
      /** Format: uuid */
      fileId: string;
      path?: string;
      sortOrder?: number;
      required?: boolean;
      /** Format: date-time */
      addedAt?: string;
    };
    BundleObjectWithFile: {
      bundleObject: components["schemas"]["BundleObject"];
      file: components["schemas"]["File"];
    };
    Recipient: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      email: string;
      name?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Plugin: {
      /** Format: uuid */
      id: string;
      name: string;
      version?: string;
      description?: string;
      author?: string;
      homepageUrl?: string;
      repositoryUrl?: string;
      /** Format: date-time */
      installedAt?: string;
      capabilities: components["schemas"]["Capability"][];
    };
    Capability: {
      /** Format: uuid */
      id?: string;
      /** @enum {string} */
      kind: "TRIGGER" | "ACTION";
      key: string;
      displayName: string;
      jsonSchema?: Record<string, never>;
      isEnabled?: boolean;
    };
    TriggerDefinition: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      capabilityId: string;
      config: Record<string, never>;
      isEnabled?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ActionDefinition: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      capabilityId: string;
      config: Record<string, never>;
      isEnabled?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ChangeLogVersion: {
      version: number;
      isSnapshot: boolean;
      /** @description sha256 hex of materialized post-change state */
      hash: string;
      changeNote?: string | null;
      /** @description JSON Pointer to primary changed path */
      changedPath?: string | null;
      changeKind?:
        | ("ADD_CHILD" | "UPDATE_CHILD" | "REMOVE_CHILD" | "REORDER" | "UPDATE_PARENT")
        | null;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      actorType: "USER" | "ACTION" | "SYSTEM";
      actorUserId?: string | null;
      actorInvocationId?: string | null;
      actorActionDefinitionId?: string | null;
      onBehalfOfUserId?: string | null;
    };
    ChangeLogMaterialized: {
      version: number;
      isSnapshot: boolean;
      hash: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      actorType: "USER" | "ACTION" | "SYSTEM";
      actorUserId?: string | null;
      actorInvocationId?: string | null;
      actorActionDefinitionId?: string | null;
      onBehalfOfUserId?: string | null;
      /** @description Canonical aggregate snapshot for the specific entity version */
      state: {
        [key: string]: unknown;
      };
    };
    Pipeline: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string | null;
      isEnabled: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PipelineStep: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      pipelineId: string;
      action?: components["schemas"]["ActionDefinition"];
      /** Format: uuid */
      actionId: string;
      sortOrder?: number;
      isEnabled: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PipelineTrigger: {
      /** Format: uuid */
      pipelineId: string;
      trigger?: components["schemas"]["TriggerDefinition"];
      /** Format: uuid */
      triggerId: string;
      sortOrder?: number;
      isEnabled: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    User: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      email: string;
      /** @enum {string} */
      role: "ADMIN" | "EXECUTOR";
      /** Format: date-time */
      createdAt?: string;
    };
    DeviceStartResponse: {
      device_code: string;
      user_code: string;
      verification_uri: string;
      expires_in: number;
      interval: number;
    };
    DevicePollPending: {
      /** @enum {string} */
      status: "pending";
      interval: number;
    };
    DevicePollSuccess: {
      access_token: string;
      /** @enum {string} */
      token_type: "bearer";
      scopes: string[];
      /** Format: date-time */
      expires_at?: string;
    };
  };
  responses: {
    /** @description Unauthorized */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Forbidden */
    Forbidden: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Not found */
    NotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Rate limited */
    RateLimited: {
      headers: {
        /** @description Seconds to wait before retrying */
        "Retry-After"?: number;
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Validation error */
    ValidationError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Conflict */
    Conflict: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description Continuation cursor for pagination */
    Cursor: string;
    /** @description Page size */
    Limit: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
  getOpenApi: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OpenAPI JSON */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not bundled */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getLiveness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Alive */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
    };
  };
  getReadiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ready */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      /** @description One or more dependencies are not ready */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is healthy */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @enum {string} */
            status: "ok";
            queue: string;
            storage: string;
          };
        };
      };
    };
  };
  startAdminLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
        };
      };
    };
    responses: {
      /** @description Dev mode only — returns a direct login URL instead of sending email */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description Magic-link callback URL usable to complete login */
            login_url: string;
          };
        };
      };
      /** @description Magic link issued (no content) */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      403: components["responses"]["Forbidden"];
    };
  };
  finalizeAdminLogin: {
    parameters: {
      query: {
        token: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Session established via cookie */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  logoutAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logged out */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: components["responses"]["Forbidden"];
    };
  };
  getCurrentAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["User"];
            session?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  whoAmI: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Identity */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @enum {string} */
            kind?: "admin" | "cli";
            user?: components["schemas"]["User"];
            scopes?: string[];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listAdminSessions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Sessions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: {
              /** Format: uuid */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              expiresAt: string;
              /** Format: date-time */
              lastSeenAt?: string;
              ip?: string;
              userAgent?: string;
            }[];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  revokeAdminSession: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          sessionId: string;
        };
      };
    };
    responses: {
      /** @description Revoked */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  startRecipientOtp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          recipientId: string;
          bundleId: string;
        };
      };
    };
    responses: {
      /** @description OTP issued (dev logs only) */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      404: components["responses"]["NotFound"];
      429: components["responses"]["RateLimited"];
    };
  };
  verifyRecipientOtp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          recipientId: string;
          bundleId: string;
          otp: string;
        };
      };
    };
    responses: {
      /** @description Session established via cookie */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      429: components["responses"]["RateLimited"];
    };
  };
  logoutRecipient: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logged out */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  startCliDeviceAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email?: string;
          deviceName?: string;
        };
      };
    };
    responses: {
      /** @description Device auth started */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeviceStartResponse"];
        };
      };
      400: components["responses"]["ValidationError"];
      429: components["responses"]["RateLimited"];
    };
  };
  approveCliDevice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          user_code: string;
        };
      };
    };
    responses: {
      /** @description Approved */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  pollCliDevice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          device_code: string;
        };
      };
    };
    responses: {
      /** @description Authorization complete */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DevicePollSuccess"];
        };
      };
      /** @description Authorization pending */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DevicePollPending"];
        };
      };
      400: components["responses"]["ValidationError"];
      429: components["responses"]["RateLimited"];
    };
  };
  listCliTokens: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tokens list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            tokens: Record<string, never>[];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  createCliToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          scopes?: string[];
          ttlDays?: number;
        };
      };
    };
    responses: {
      /** @description Created; token is only returned once */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            token: string;
            /** Format: uuid */
            id: string;
            name?: string;
            scopes?: string[];
            /** Format: date-time */
            expiresAt?: string;
          };
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  revokeCliToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          tokenId: string;
        };
      };
    };
    responses: {
      /** @description Revoked */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  rotateCliToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          tokenId: string;
        };
      };
    };
    responses: {
      /** @description Rotated; new token returned once */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            token: string;
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            expiresAt?: string;
          };
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  listFiles: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
        prefix?: string;
        q?: string;
        unassigned?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Files page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["File"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  uploadFile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          key?: string;
          /** Format: binary */
          file: string;
          contentType?: string;
          metadata?: {
            [key: string]: string;
          };
          overwrite?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated (overwrite) */
      200: {
        headers: {
          ETag?: string;
          Location?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["File"];
        };
      };
      /** @description Created */
      201: {
        headers: {
          ETag?: string;
          /** @description URL of the created resource */
          Location?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["File"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      409: components["responses"]["Conflict"];
    };
  };
  createUploadUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          key: string;
          /** @description sha256 hash of the content (hex) */
          sha256: string;
          contentType?: string;
          size?: number;
          metadata?: {
            [key: string]: string;
          };
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            url: string;
            fields?: {
              [key: string]: unknown;
            };
            headers?: {
              [key: string]: unknown;
            };
            /** Format: date-time */
            expiresAt: string;
            tempKey: string;
            /** Format: uuid */
            reservationId: string;
          };
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      /** @description Not Implemented — presigned uploads not supported by this driver */
      501: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  commitUpload: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json":
          | {
              key?: string;
              tempKey?: string;
              /** Format: uuid */
              reservationId?: string;
              metadata?: {
                [key: string]: string;
              };
              contentType?: string;
              originalName?: string;
              overwrite?: boolean;
            }
          | unknown
          | unknown;
      };
    };
    responses: {
      /** @description Updated (overwrite) */
      200: {
        headers: {
          ETag?: string;
          Location?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["File"];
        };
      };
      /** @description Created */
      201: {
        headers: {
          ETag?: string;
          Location?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["File"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      409: components["responses"]["Conflict"];
    };
  };
  getFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["File"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  deleteFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  moveFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          newKey: string;
        };
      };
    };
    responses: {
      /** @description Moved */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updateFileMetadata: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          metadata: {
            [key: string]: string;
          };
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  deleteFilesBatch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          ids: string[];
        };
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  moveFilesBatch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          items: {
            /** Format: uuid */
            id: string;
            newKey: string;
          }[];
        };
      };
    };
    responses: {
      /** @description Moved */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      409: components["responses"]["Conflict"];
    };
  };
  downloadFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description File stream */
      200: {
        headers: {
          ETag?: string;
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  listBundles: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundles page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Bundle"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  createBundle: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Bundle"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getBundle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Bundle"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  deleteBundle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updateBundle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          description?: string;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listBundleObjects: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundle objects page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["BundleObjectWithFile"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  attachBundleObjects: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json":
          | {
              /** Format: uuid */
              fileId: string;
              path?: string;
              sortOrder?: number;
              required?: boolean;
            }[]
          | {
              items: {
                /** Format: uuid */
                fileId: string;
                path?: string;
                sortOrder?: number;
                required?: boolean;
              }[];
            };
      };
    };
    responses: {
      /** @description Attached */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["BundleObject"][];
          };
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  deleteBundleObject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Detached */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updateBundleObject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          path?: string;
          sortOrder?: number;
          required?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listBundleVersions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Versions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ChangeLogVersion"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getBundleVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
        version: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Materialized bundle at version */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChangeLogMaterialized"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  listRecipients: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
        q?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Recipients page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Recipient"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  createRecipient: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
          name?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Recipient"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getRecipient: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recipientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Recipient */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Recipient"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  listRecipientVersions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        recipientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Versions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ChangeLogVersion"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getRecipientVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recipientId: string;
        version: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Materialized recipient at version */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChangeLogMaterialized"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  listBundleRecipients: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundle recipients page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Recipient"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  attachRecipientToBundle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          recipientId: string;
        };
      };
    };
    responses: {
      /** @description Attached */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  detachRecipientFromBundle: {
    parameters: {
      query: {
        recipientId: string;
      };
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Detached */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  attachRecipientsToBundleBatch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          recipientIds: string[];
        };
      };
    };
    responses: {
      /** @description Attached */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  getPortalMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Recipient identity and allowed bundles */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            recipient: components["schemas"]["Recipient"];
            bundles: {
              /** Format: uuid */
              bundleId?: string;
              name?: string;
            }[];
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  listPortalBundles: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundles page */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Bundle"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  listPortalBundleObjects: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Files in bundle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["File"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  downloadPortalBundle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bundleId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bundle archive */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Redirect to signed URL */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  resendPortalOtp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          recipientId: string;
          /** Format: uuid */
          bundleId: string;
        };
      };
    };
    responses: {
      /** @description Sent */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      429: components["responses"]["RateLimited"];
    };
  };
  listPlugins: {
    parameters: {
      query?: {
        /** @description Free-text match against name, description, author */
        q?: string;
        /** @description Only plugins that have at least one capability of this kind */
        kind?: "TRIGGER" | "ACTION";
        /** @description Substring match against capability key */
        capabilityKey?: string;
        /** @description Only plugins with at least one enabled capability */
        enabled?: boolean;
        limit?: number;
        /** @description Opaque pagination cursor */
        cursor?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Plugins */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Plugin"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  uninstallPlugin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pluginId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Removed */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  installPlugin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          source: string;
          verifySignature?: boolean;
        };
      };
    };
    responses: {
      /** @description Installing */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listCapabilities: {
    parameters: {
      query?: {
        kind?: "TRIGGER" | "ACTION";
        /** @description Substring match against capability key */
        key?: string;
        pluginId?: string;
        enabled?: boolean;
        limit?: number;
        /** @description Opaque pagination cursor */
        cursor?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Capability registry */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Capability"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listTriggers: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Triggers */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["TriggerDefinition"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  createTrigger: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** Format: uuid */
          capabilityId: string;
          config: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TriggerDefinition"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updateTrigger: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          config?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listTriggerVersions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Versions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ChangeLogVersion"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getTriggerVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        version: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Materialized trigger definition at version */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChangeLogMaterialized"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  listActions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Actions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ActionDefinition"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  createAction: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** Format: uuid */
          capabilityId: string;
          config: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ActionDefinition"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updateAction: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          config?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listActionVersions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Versions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ChangeLogVersion"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getActionVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        version: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Materialized action definition at version */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChangeLogMaterialized"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  listPipelines: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pipelines */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["Pipeline"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  createPipeline: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Pipeline"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  deletePipeline: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  updatePipeline: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          description?: string;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  listPipelineSteps: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        pipelineId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pipeline steps */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["PipelineStep"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  addPipelineStep: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          actionId: string;
          sortOrder?: number;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PipelineStep"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  deletePipelineStep: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
        stepId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  updatePipelineStep: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
        stepId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          sortOrder?: number;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  listPipelineTriggers: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        pipelineId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pipeline triggers */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["PipelineTrigger"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  addPipelineTrigger: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          triggerId: string;
          sortOrder?: number;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PipelineTrigger"];
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  deletePipelineTrigger: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
        triggerId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  updatePipelineTrigger: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pipelineId: string;
        triggerId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          sortOrder?: number;
          isEnabled?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
    };
  };
  listPipelineVersions: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Versions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["ChangeLogVersion"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getPipelineVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        version: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Materialized pipeline at version */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChangeLogMaterialized"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  listUsers: {
    parameters: {
      query?: {
        /** @description Page size */
        limit?: components["parameters"]["Limit"];
        /** @description Continuation cursor for pagination */
        cursor?: components["parameters"]["Cursor"];
        q?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            items: components["schemas"]["User"][];
            nextCursor?: string;
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  inviteUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: email
           * @description Email address of the invitee
           */
          email: string;
          /**
           * @description Role to assign to the user. Defaults to EXECUTOR.
           * @enum {string}
           */
          role?: "ADMIN" | "EXECUTOR";
        };
      };
    };
    responses: {
      /** @description Invitation created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description Magic-link callback URL usable by the invitee */
            login_url?: string;
          };
        };
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      409: components["responses"]["Conflict"];
    };
  };
  revokeUserAccess: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @default true */
          sessions?: boolean;
          /** @default true */
          tokens?: boolean;
        };
      };
    };
    responses: {
      /** @description Revoked */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ValidationError"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      409: components["responses"]["Conflict"];
    };
  };
}
